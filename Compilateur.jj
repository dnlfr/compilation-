// fichier Compilateur.jj 
PARSER_BEGIN(Compilateur)

import java.io.InputStream;
public class Compilateur {
    public static void main(String args[]) {
        try {
            Compilateur parseur = new Compilateur(System.in);
            int i = parseur.mainNT();
            System.out.println(i);
            System.out.println("C'est bien une expression arithmetique");
        } catch (TokenMgrError e) {
            System.out.println("Ceci n'est pas une expression arithmetique");
        } catch (ParseException e) {
            System.out.println("Ceci n'est pas une expression arithmetique parseur ");
        }
    }
}
PARSER_END(Compilateur)

SKIP :
{ " " | "\t" | "\n" }

TOKEN :
{ < NOMBRE : (["0"-"9"])+ | (["0"-"9"])+ "." (["0"-"9"])+ | (["0"-"9"])+ "." |
    "." (["0"-"9"])+> }

TOKEN :
{ < DIVISION: "/" >
}

int mainNT () :
{int e;}
{ e=expression() ";" {return e;}}

int expression () :
{int a; int b;}
{ a=terme() (
"+" b=terme() {a += b;}
| "-" terme() {a -= b;}
)* {return a;}
}

int terme () :
{int res; int e;}
{ e=facteur() {res = e;}
( "*" (e=facteur()) {res = res * e;}
| "/" facteur() {res = res / e;}
)* {return res;}
}

int facteur () :
{int e; Token t;}
{ "(" (e=expression()) ")" {return e;}
| "-" (e=facteur()) {return (-e);}
| t=<NOMBRE> {return Integer.parseInt(t.image);}
}